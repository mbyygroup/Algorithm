# java数据结构的类库
java.util.*

# 数据结构概念
1.数据结构是指数据在计算机内存空间中或者磁盘中的组织形式
2.正确选择数据结构会使程序的效率大大提高
3.数据结构的例子有数组,栈和链表
4.算法是完成特定任务的过程
5.在java中算法经常通过类的方法实现
6.数据结构和算法可以被用来建造数据库
7.一些数据结构的用途是作为程序员的工具:他们帮助执行算法
8.其他数据结构可以模拟现实世界中的情况,比如城市之间的电话线网
9.数据库是指由许多类似的记录组成的数据存储的集合
10.一条记录经常表示现实世界中的一个事物,例如一名雇员或一个汽车零件
11.一条记录被分成字段,每个字段都存储了有这个纪录所描述事物的一条特征
12.一个关键字是一条记录中的一个字段,通过它可以对数据执行许多操作.例如,认识记录可以通过LastName字段进行排序
13.可以搜索数据库以便找到关键字字段有定值的所有记录,这个值被称为查找关键字

# 数组
1.java中的数组是对象,由new操作符创建
2.无序数组可以提供快速的插入,但查找和删除较慢
3.将数组封装到类中可以保护数组不被随意更改
4.类的接口由类用户可访问的方法(有时还有字段)组成
5.类的接口被设计成使类用户的操作更加简单
6.有序数组可以使用二分查找
7.以B为底A的对数(大概)实在结果小于1之前用B除以A的次数
8.线性查找需要的时间与数组中数据项的个数成正比
9.二分查找需要的时间与数组中数据项的个数的对数成正比
10.大O表示法为比较算法的速度提供了一种方便的方法
11.O(1)级时间的算法是最好的,O(logN)次之,O(N)为一般,O(N2)最差

# 简单排序
1.排序包括比较数组中数据项的关键字和移动相应的数据项(实际上,是数据项的引用),知道他们排好序为止
2.不变性是指在算法运行时保持不变的条件
3.冒泡排序算法是效率最差的算法,也是最简单的
4.插入排序是所有O(N2)级别排序算法中应用最多的
5.如果具有相同关键字的数据项,经过排序他们的顺序保持不变,这样的排序就是稳定排序
6.简单排序算法除了需要厨师数组之外,都只需要一个临时变量

# 栈
1.栈,队列和优先级队列是经常用于简化某些程序操作的数据结构
2.这三个数据结构中,只有一个数据项可以被访问
3.栈允许访问最后一个插入的数据项
4.栈中重要的操作是在栈顶插入(压入)一个数据项,以及从栈顶移除(弹出)一个数据项
5.队列只允许访问第一个插入的数据项
6.队列的重要操作是在队尾插入数据项和在队头移除数据项
7.队列可以实现为循环队列,它基于数组,数组下标可以从数据末端回绕到数组的开始位置
8.优先级队列允许访问最小(或者有时是最大)的数据项
9.栈,队列和优先级队列可以用数组实现,也可以用链表或其他机制实现
10.普通算术表达式是由中缀表达时表示的,这种命名的原因是操作符写在两个操作数的中间.
11.在后缀表达式中,操作符跟在两个操作数的后面
12.算术表达式求值通常都是先转化为后缀表达式,然后再求后缀表达式的值
13.在中缀表达式转换到后缀表达式以及求后缀表达式的值的过程中,栈都是很有用的工具

# 链表
1.链表包含一个linkedList对象和许多Link对象
2.linkedList对象包含一个引用,这个引用通常叫做first,它指向链表的第一个链接点
3.每个Link对象包含数据和一个引用,通常叫做next,它指向链表的下一个链结点
4.next字段为null值意味着链表的结尾
5.在表头插入链接点需要把新链接点的next字段指向原来的第一个链接点,然后把first指向新链接点
6.在表头删除链接点要把first指向first.next
7.为了遍历链表,从first开始,然后从一个链接点到下一个链接点,方法是用每个链接点的next字段找到下一个链接点
8.通过遍历链表可以找到拥有特定值得链结点.一旦找到,可以显示,删除或用其他方法操纵链结点
9.新链结点可以插入在某个特定值得链结点的前面或后面,首先要遍历找到这个链结点
10.双端链表在链表中维护一个指向最后一个链结点的引用,他通常和first一样,叫做last
11.双端链表允许在表尾插入数据项
12.抽象数据类型是一种数据存储类,不涉及他的实现
13.栈和队列是ADT.它们既可以用数组实现,又可以用链表实现
14.有序链表中,链结点按照关键值生序(有时是降序)排列
15.在有序链表中插入需要O(N)的时间,因为必须找到正确的插入点.最小值链结点的删除需要O(1)的时间
16.双向链表中,每个链结点包含对前一个链结点的引用,同时有对后一个链结点的引用
17.双向链表允许反向遍历,并可以从表尾删除
18.迭代器是一个引用,它被封装在类对象中,这个引用指向相关联的链表中的链结点
19.迭代器方法允许使用者沿链表移动迭代器,并访问当前指示的链结点
20.能用迭代器遍历链表,在选定的链结点(或所有链结点)上执行某些操作

# 递归
1.一个递归的方法每次用不同的参数值反复调用自身
2.某种参数值使递归的防范返回,而不再调用自身,这称为基值情况
3.当递归方法返回时,递归过程通过逐渐完成各层方法实力的未执行部分,而从最内层返回到最外层的原始调用处
4.三角数字是它本身以及所有比他小的数字的和,例如4的三角数字是10,因为4+3+2+1=10
5.一个数的阶乘是它自身和所有比它小的数的乘积,例如4的阶乘是4*3*2*1=24
6.三角数字和阶乘都可以通过递归的方法来实现
7.一个单词的全排列(它的n个字母的所有可能排列)可以通过反复的轮换它的字母以及全排列他最右边的n-1个字母来递归得到
8.二分查找可以通过检查查找关键字在有序序列的哪一半,然后在这一半做相同的事情,这写都可以用递归来实现
9.汉诺塔的问题包含三个塔座和任意数量的盘子
10.汉诺塔问题可以用递归来解决:拔出了最低端盘子外的所有盘子形成的子树移动到一个中介塔座上,然后把最低端的盘子移动
到目标塔座上,最终把那个子树移动到目标塔座上
11.归并两个有序数组意思是创建第三个数组,这个数组按顺序存储从这两个有序数组中取到的所有数据项
12.在归并排序中,一个大数组的单个数据项的子数组归并为两个数据项的子数组,然后两个数据项的子数组归并为4个数据项的
子数组,如此下去直到所有的数组数据项有序
13.归并排序需要O(N*logN)时间
14.归并排序需要一个大小等于原来数组的工作空间
15.对于三角数字,阶乘,单词字母全排列以及二分查找,他们的递归的方法只包含一次对自身的调用(在二分查找的代码中显示有
两次,但是在任何给定代码的运行中只有一次自身的调用执行了)
16.对于汉诺塔和归并排序问题,它们的递归的方法包括两次递归调用
17.任何可以用递归完成的操作都可以用一个栈来实现
18.递归的方法可能效率低.如果是这样的话,有时可以用一个简单循环或者是一个基于栈的方法来替代它

# 高级排序
1.希尔排序将增量应用到插入排序,然