# 哈希值计算
规则可随意,不固定.比如全是数字时,哈希值可以为数字%数组大小.或者计算ascii的编码然后%任意一个数字
# 插入
检测哈希值位置上是否有元素,如果没有直接插入,如果有则可以考虑往后找空的位置添加(开放地址法),或者存储入一个数组链表
(链地址法)
# 删除
查找哈希值位置上的元素,如果不是则根据选取办法的区别分别往后找并赋值为-1或者在链表里删除链接点
# 开放地址法引发的问题
线性探测容易发生聚集,一旦发生聚集,他就会变得越来越大,哈希化后的落在聚集范围内的数据项,都要一步一步移动,并且插在聚
集的最后,因此是狙击变得更大.聚集越大,他就增长的越快.聚集会降低哈希表的性能.
# 二次探测
目的是防止聚集产生.思想是探测相隔较远的单元,而不是和原始位置相邻的单元.步骤是步数的平方.如果哈希函数计算的原始下
标是x,线性探测就是x+1,x+2,x+3,而在二次探测中,探测的过程是x+1,x+4,x+9.数组容量总是选择一个质数,防止填表操作时
步长序列无限长导致系统崩溃.二次探测只能解决原始聚集的问题,但是会产生另外一种更细的聚集问题(原因:所有映射到同一个
位置的关键字在寻找空位时,探测的单元都是一样的).二次聚集不是严重的问题,但二次探测不会被经常使用,因为还有更好的解
决办法
# 再哈希法
对哈希值进行再计算来生成步长